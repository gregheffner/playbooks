---
- name: Run Windows Enumeration Script and Output to HTML
  hosts: windows
  tasks:
    - name: Ensure C:\temp directory exists
      win_file:
        path: C:\temp
        state: directory

    - name: Run standard enumeration commands and save output to HTML
      win_shell: |
        $commands = @{
          'Network Information' = 'Get-NetIPConfiguration | ft InterfaceAlias,InterfaceDescription,IPv4Address';
          'DNS Servers' = 'Get-DnsClientServerAddress -AddressFamily IPv4 | ft';
          'ARP cache' = 'Get-NetNeighbor -AddressFamily IPv4 | ft ifIndex,IPAddress,LinkLayerAddress,State';
          'Routing Table' = 'Get-NetRoute -AddressFamily IPv4 | ft DestinationPrefix,NextHop,RouteMetric,ifIndex';
          'Network Connections' = 'netstat -ano';
          'Connected Drives' = 'Get-PSDrive | where {$_.Provider -like "Microsoft.PowerShell.Core\FileSystem"} | ft';
          'Firewall Config' = 'netsh firewall show config';
          'Current User' = 'Write-Host $env:UserDomain\$env:UserName';
          'User Privileges' = 'whoami /priv';
          'Local Users' = 'Get-LocalUser | ft Name,Enabled,LastLogon';
          'Logged in Users' = 'qwinsta';
          'Credential Manager' = 'cmdkey /list';
          'User Autologon Registry Items' = 'Get-ItemProperty -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinLogon" | select "Default*" | ft';
          'Local Groups' = 'Get-LocalGroup | ft Name';
          'Local Administrators' = 'Get-LocalGroupMember Administrators | ft Name, PrincipalSource';
          'User Directories' = 'Get-ChildItem C:\Users | ft Name';
          'Searching for SAM backup files' = 'Test-Path $env:SYSTEMROOT\repair\SAM; Test-Path $env:SYSTEMROOT\system32\config\regback\SAM';
          'Running Processes' = 'Get-WmiObject -Query "Select * from Win32_Process" | where {$_.Name -notlike "svchost*"} | Select Name, Handle, @{Label="Owner";Expression={$_.GetOwner().User}} | ft -AutoSize';
          'Installed Software Directories' = 'Get-ChildItem "C:\Program Files", "C:\Program Files (x86)" | ft Parent,Name,LastWriteTime';
          'Software in Registry' = 'Get-ChildItem -path Registry::HKEY_LOCAL_MACHINE\SOFTWARE | ft Name';
          'Folders with Everyone Permissions' = 'Get-ChildItem "C:\Program Files\*", "C:\Program Files (x86)\*" | % { try { Get-Acl $_ -ErrorAction SilentlyContinue | Where {($_.Access | select -ExpandProperty IdentityReference) -match "Everyone"} } catch {}} | ft';
          'Folders with BUILTIN\User Permissions' = 'Get-ChildItem "C:\Program Files\*", "C:\Program Files (x86)\*" | % { try { Get-Acl $_ -ErrorAction SilentlyContinue | Where {($_.Access | select -ExpandProperty IdentityReference) -match "BUILTIN\Users"} } catch {}} | ft';
          'Checking registry for AlwaysInstallElevated' = 'Test-Path -Path "Registry::HKEY_CURRENT_USER\SOFTWARE\Policies\Microsoft\Windows\Installer" | ft';
          'Unquoted Service Paths' = 'Get-WmiObject -Class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.StartMode -eq "Auto" -and $_.PathName -notlike "C:\Windows*" -and $_.PathName -notlike ''"*''} | select PathName, DisplayName, Name | ft';
          'Scheduled Tasks' = 'Get-ScheduledTask | where {$_.TaskPath -notlike "\Microsoft*"} | ft TaskName,TaskPath,State';
          'Tasks Folder' = 'Get-ChildItem C:\Windows\Tasks | ft';
          'Startup Commands' = 'Get-CimInstance Win32_StartupCommand | select Name, command, Location, User | fl';
        }
        $html = "<html><body>"
        foreach ($command in $commands.GetEnumerator()) {
          $html += "<h2>" + $command.Key + "</h2>"
          $html += "<pre>" + (Invoke-Expression $command.Value | Out-String) + "</pre>"
        }
        $html += "</body></html>"
        $html | Out-File C:\temp\standard_checks.html
      register: standard_check_result

    - name: Run extended enumeration commands and save output to HTML
      win_shell: |
        $commands = @{
          'Searching for Unattend and Sysprep files' = 'Get-Childitem -Path C:\ -Include *unattend*,*sysprep* -File -Recurse -ErrorAction SilentlyContinue | where {($_.Name -like "*.xml" -or $_.Name -like "*.txt" -or $_.Name -like "*.ini")} | Out-File C:\temp\unattendfiles.txt';
          'Searching for web.config files' = 'Get-Childitem -Path C:\ -Include web.config -File -Recurse -ErrorAction SilentlyContinue | Out-File C:\temp\webconfigfiles.txt';
          'Searching for other interesting files' = 'Get-Childitem -Path C:\ -Include *password*,*cred*,*vnc* -File -Recurse -ErrorAction SilentlyContinue | Out-File C:\temp\otherfiles.txt';
          'Searching for various config files' = 'Get-Childitem -Path C:\ -Include php.ini,httpd.conf,httpd-xampp.conf,my.ini,my.cnf -File -Recurse -ErrorAction SilentlyContinue | Out-File C:\temp\configfiles.txt';
          'Searching HKLM for passwords' = 'reg query HKLM /f password /t REG_SZ /s | Out-File C:\temp\hklmpasswords.txt';
          'Searching HKCU for passwords' = 'reg query HKCU /f password /t REG_SZ /s | Out-File C:\temp\hkcupasswords.txt';
          'Searching for files with passwords' = 'Get-ChildItem c:\* -include *.xml,*.ini,*.txt,*.config -Recurse -ErrorAction SilentlyContinue | Where-Object {$_.PSPath -notlike "*C:\temp*" -and $_.PSParentPath -notlike "*Reference Assemblies*" -and $_.PSParentPath -notlike "*Windows Kits*"} | Select-String -Pattern "password" | Out-File C:\temp\password.txt';
        }
        $html = "<html><body>"
        foreach ($command in $commands.GetEnumerator()) {
          $html += "<h2>" + $command.Key + "</h2>"
          $html += "<pre>" + (Invoke-Expression $command.Value | Out-String) + "</pre>"
        }
        $html += "</body></html>"
        $html | Out-File C:\temp\extended_checks.html
      when: extended | default(false)
      register: extended_check_result

    - name: Fetch standard checks HTML file
      fetch:
        src: C:\temp\standard_checks.html
        dest: ~/windowsupdates/standard_checks_{{ ansible_date_time.date }}.html
        flat: yes

    - name: Fetch extended checks HTML file
      fetch:
        src: C:\temp\extended_checks.html
        dest: ~/windowsupdates/extended_checks_{{ ansible_date_time.date }}.html
        flat: yes
      when: extended | default(false)

    - name: Display path to standard checks HTML
      debug:
        msg: "Standard checks output saved to ~/windowsupdates/standard_checks_{{ ansible_date_time.date }}.html"

    - name: Display path to extended checks HTML
      debug:
        msg: "Extended checks output saved to ~/windowsupdates/extended_checks_{{ ansible_date_time.date }}.html"
      when: extended | default(false)
